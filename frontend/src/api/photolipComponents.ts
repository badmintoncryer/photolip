/* eslint-disable */

/**
 * Generated by @openapi-codegen
 *
 * @version 2022-07-29 08:18:09UTC
 */
import * as reactQuery from '@tanstack/react-query'
import { usePhotolipContext, PhotolipContext } from './photolipContext'
import type * as Fetcher from './photolipFetcher'
import { photolipFetch } from './photolipFetcher'
import type * as Schemas from './photolipSchemas'

export type CreateTravelError = Fetcher.ErrorWrapper<undefined>

export type CreateTravelResponse = Schemas.PostTravelReturn[]

export type CreateTravelVariables = {
  body: Schemas.TravelDataRequestBody
} & PhotolipContext['fetcherOptions']

export const fetchCreateTravel = (variables: CreateTravelVariables, signal?: AbortSignal) =>
  photolipFetch<CreateTravelResponse, CreateTravelError, Schemas.TravelDataRequestBody, {}, {}, {}>({
    url: '/travel',
    method: 'post',
    ...variables,
    signal
  })

export const useCreateTravel = (
  options?: Omit<
    reactQuery.UseMutationOptions<CreateTravelResponse, CreateTravelError, CreateTravelVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePhotolipContext()
  return reactQuery.useMutation<CreateTravelResponse, CreateTravelError, CreateTravelVariables>({
    mutationFn: (variables: CreateTravelVariables) => fetchCreateTravel({ ...fetcherOptions, ...variables }),
    ...options
  })
}

export type DeleteTravelError = Fetcher.ErrorWrapper<undefined>

export type DeleteTravelResponse = Schemas.DeleteTravelReturn[]

export type DeleteTravelVariables = {
  body: Schemas.TravelDataRequestBody
} & PhotolipContext['fetcherOptions']

export const fetchDeleteTravel = (variables: DeleteTravelVariables, signal?: AbortSignal) =>
  photolipFetch<DeleteTravelResponse, DeleteTravelError, Schemas.TravelDataRequestBody, {}, {}, {}>({
    url: '/travel',
    method: 'delete',
    ...variables,
    signal
  })

export const useDeleteTravel = (
  options?: Omit<
    reactQuery.UseMutationOptions<DeleteTravelResponse, DeleteTravelError, DeleteTravelVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePhotolipContext()
  return reactQuery.useMutation<DeleteTravelResponse, DeleteTravelError, DeleteTravelVariables>({
    mutationFn: (variables: DeleteTravelVariables) => fetchDeleteTravel({ ...fetcherOptions, ...variables }),
    ...options
  })
}

export type GetTravelByIdPathParams = {
  /**
   * Generated path parameter for travelId
   */
  travelId: string
}

export type GetTravelByIdError = Fetcher.ErrorWrapper<undefined>

export type GetTravelByIdResponse = Schemas.TravelData[]

export type GetTravelByIdVariables = {
  pathParams: GetTravelByIdPathParams
} & PhotolipContext['fetcherOptions']

export const fetchGetTravelById = (variables: GetTravelByIdVariables, signal?: AbortSignal) =>
  photolipFetch<GetTravelByIdResponse, GetTravelByIdError, undefined, {}, {}, GetTravelByIdPathParams>({
    url: '/travel/{travelId}',
    method: 'get',
    ...variables,
    signal
  })

export const useGetTravelById = <TData = GetTravelByIdResponse>(
  variables: GetTravelByIdVariables,
  options?: Omit<reactQuery.UseQueryOptions<GetTravelByIdResponse, GetTravelByIdError, TData>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePhotolipContext(options)
  return reactQuery.useQuery<GetTravelByIdResponse, GetTravelByIdError, TData>({
    queryKey: queryKeyFn({ path: '/travel/{travelId}', operationId: 'getTravelById', variables }),
    queryFn: ({ signal }) => fetchGetTravelById({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions
  })
}

export type DeleteTravelByIdPathParams = {
  /**
   * Generated path parameter for travelId
   */
  travelId: string
}

export type DeleteTravelByIdError = Fetcher.ErrorWrapper<undefined>

export type DeleteTravelByIdResponse = Schemas.DeleteTravelReturn[]

export type DeleteTravelByIdVariables = {
  pathParams: DeleteTravelByIdPathParams
} & PhotolipContext['fetcherOptions']

export const fetchDeleteTravelById = (variables: DeleteTravelByIdVariables, signal?: AbortSignal) =>
  photolipFetch<DeleteTravelByIdResponse, DeleteTravelByIdError, undefined, {}, {}, DeleteTravelByIdPathParams>({
    url: '/travel/{travelId}',
    method: 'delete',
    ...variables,
    signal
  })

export const useDeleteTravelById = (
  options?: Omit<
    reactQuery.UseMutationOptions<DeleteTravelByIdResponse, DeleteTravelByIdError, DeleteTravelByIdVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePhotolipContext()
  return reactQuery.useMutation<DeleteTravelByIdResponse, DeleteTravelByIdError, DeleteTravelByIdVariables>({
    mutationFn: (variables: DeleteTravelByIdVariables) => fetchDeleteTravelById({ ...fetcherOptions, ...variables }),
    ...options
  })
}

export type GetTravelRecordError = Fetcher.ErrorWrapper<undefined>

export type GetTravelRecordResponse = Schemas.TravelRecord[]

export type GetTravelRecordVariables = PhotolipContext['fetcherOptions']

export const fetchGetTravelRecord = (variables: GetTravelRecordVariables, signal?: AbortSignal) =>
  photolipFetch<GetTravelRecordResponse, GetTravelRecordError, undefined, {}, {}, {}>({
    url: '/travelRecord',
    method: 'get',
    ...variables,
    signal
  })

export const useGetTravelRecord = <TData = GetTravelRecordResponse>(
  variables: GetTravelRecordVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetTravelRecordResponse, GetTravelRecordError, TData>,
    'queryKey' | 'queryFn'
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePhotolipContext(options)
  return reactQuery.useQuery<GetTravelRecordResponse, GetTravelRecordError, TData>({
    queryKey: queryKeyFn({ path: '/travelRecord', operationId: 'getTravelRecord', variables }),
    queryFn: ({ signal }) => fetchGetTravelRecord({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions
  })
}

export type CreateTravelRecordError = Fetcher.ErrorWrapper<undefined>

export type CreateTravelRecordResponse = Schemas.CreateTravelRecordReturn[]

export type CreateTravelRecordVariables = {
  body: Schemas.TravelRecordRequestBody
} & PhotolipContext['fetcherOptions']

export const fetchCreateTravelRecord = (variables: CreateTravelRecordVariables, signal?: AbortSignal) =>
  photolipFetch<CreateTravelRecordResponse, CreateTravelRecordError, Schemas.TravelRecordRequestBody, {}, {}, {}>({
    url: '/travelRecord',
    method: 'post',
    ...variables,
    signal
  })

export const useCreateTravelRecord = (
  options?: Omit<
    reactQuery.UseMutationOptions<CreateTravelRecordResponse, CreateTravelRecordError, CreateTravelRecordVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePhotolipContext()
  return reactQuery.useMutation<CreateTravelRecordResponse, CreateTravelRecordError, CreateTravelRecordVariables>({
    mutationFn: (variables: CreateTravelRecordVariables) =>
      fetchCreateTravelRecord({ ...fetcherOptions, ...variables }),
    ...options
  })
}

export type DeleteTravelRecordError = Fetcher.ErrorWrapper<undefined>

export type DeleteTravelRecordResponse = Schemas.DeleteTravelRecordReturn[]

export type DeleteTravelRecordVariables = {
  body: Schemas.TravelDataRequestBody
} & PhotolipContext['fetcherOptions']

export const fetchDeleteTravelRecord = (variables: DeleteTravelRecordVariables, signal?: AbortSignal) =>
  photolipFetch<DeleteTravelRecordResponse, DeleteTravelRecordError, Schemas.TravelDataRequestBody, {}, {}, {}>({
    url: '/travelRecord',
    method: 'delete',
    ...variables,
    signal
  })

export const useDeleteTravelRecord = (
  options?: Omit<
    reactQuery.UseMutationOptions<DeleteTravelRecordResponse, DeleteTravelRecordError, DeleteTravelRecordVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePhotolipContext()
  return reactQuery.useMutation<DeleteTravelRecordResponse, DeleteTravelRecordError, DeleteTravelRecordVariables>({
    mutationFn: (variables: DeleteTravelRecordVariables) =>
      fetchDeleteTravelRecord({ ...fetcherOptions, ...variables }),
    ...options
  })
}

export type DeleteTravelRecordByIdPathParams = {
  /**
   * Generated path parameter for travelRecordId
   */
  travelRecordId: string
}

export type DeleteTravelRecordByIdError = Fetcher.ErrorWrapper<undefined>

export type DeleteTravelRecordByIdResponse = Schemas.DeleteTravelRecordReturn[]

export type DeleteTravelRecordByIdVariables = {
  pathParams: DeleteTravelRecordByIdPathParams
} & PhotolipContext['fetcherOptions']

export const fetchDeleteTravelRecordById = (variables: DeleteTravelRecordByIdVariables, signal?: AbortSignal) =>
  photolipFetch<
    DeleteTravelRecordByIdResponse,
    DeleteTravelRecordByIdError,
    undefined,
    {},
    {},
    DeleteTravelRecordByIdPathParams
  >({ url: '/travelRecord/{travelRecordId}', method: 'delete', ...variables, signal })

export const useDeleteTravelRecordById = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      DeleteTravelRecordByIdResponse,
      DeleteTravelRecordByIdError,
      DeleteTravelRecordByIdVariables
    >,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePhotolipContext()
  return reactQuery.useMutation<
    DeleteTravelRecordByIdResponse,
    DeleteTravelRecordByIdError,
    DeleteTravelRecordByIdVariables
  >({
    mutationFn: (variables: DeleteTravelRecordByIdVariables) =>
      fetchDeleteTravelRecordById({ ...fetcherOptions, ...variables }),
    ...options
  })
}

export type CreateUserError = Fetcher.ErrorWrapper<undefined>

export type CreateUserResponse = Schemas.CreateUserReturn[]

export type CreateUserVariables = PhotolipContext['fetcherOptions']

export const fetchCreateUser = (variables: CreateUserVariables, signal?: AbortSignal) =>
  photolipFetch<CreateUserResponse, CreateUserError, undefined, {}, {}, {}>({
    url: '/user',
    method: 'post',
    ...variables,
    signal
  })

export const useCreateUser = (
  options?: Omit<reactQuery.UseMutationOptions<CreateUserResponse, CreateUserError, CreateUserVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePhotolipContext()
  return reactQuery.useMutation<CreateUserResponse, CreateUserError, CreateUserVariables>({
    mutationFn: (variables: CreateUserVariables) => fetchCreateUser({ ...fetcherOptions, ...variables }),
    ...options
  })
}

export type DeleteUserError = Fetcher.ErrorWrapper<undefined>

export type DeleteUserResponse = Schemas.DeleteUserReturn[]

export type DeleteUserVariables = PhotolipContext['fetcherOptions']

export const fetchDeleteUser = (variables: DeleteUserVariables, signal?: AbortSignal) =>
  photolipFetch<DeleteUserResponse, DeleteUserError, undefined, {}, {}, {}>({
    url: '/user',
    method: 'delete',
    ...variables,
    signal
  })

export const useDeleteUser = (
  options?: Omit<reactQuery.UseMutationOptions<DeleteUserResponse, DeleteUserError, DeleteUserVariables>, 'mutationFn'>
) => {
  const { fetcherOptions } = usePhotolipContext()
  return reactQuery.useMutation<DeleteUserResponse, DeleteUserError, DeleteUserVariables>({
    mutationFn: (variables: DeleteUserVariables) => fetchDeleteUser({ ...fetcherOptions, ...variables }),
    ...options
  })
}

export type GetUserByIdPathParams = {
  /**
   * Generated path parameter for userId
   */
  userId: string
}

export type GetUserByIdError = Fetcher.ErrorWrapper<undefined>

export type GetUserByIdResponse = Schemas.UserData[]

export type GetUserByIdVariables = {
  pathParams: GetUserByIdPathParams
} & PhotolipContext['fetcherOptions']

export const fetchGetUserById = (variables: GetUserByIdVariables, signal?: AbortSignal) =>
  photolipFetch<GetUserByIdResponse, GetUserByIdError, undefined, {}, {}, GetUserByIdPathParams>({
    url: '/user/{userId}',
    method: 'get',
    ...variables,
    signal
  })

export const useGetUserById = <TData = GetUserByIdResponse>(
  variables: GetUserByIdVariables,
  options?: Omit<reactQuery.UseQueryOptions<GetUserByIdResponse, GetUserByIdError, TData>, 'queryKey' | 'queryFn'>
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = usePhotolipContext(options)
  return reactQuery.useQuery<GetUserByIdResponse, GetUserByIdError, TData>({
    queryKey: queryKeyFn({ path: '/user/{userId}', operationId: 'getUserById', variables }),
    queryFn: ({ signal }) => fetchGetUserById({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions
  })
}

export type DeleteUserByIdPathParams = {
  /**
   * Generated path parameter for userId
   */
  userId: string
}

export type DeleteUserByIdError = Fetcher.ErrorWrapper<undefined>

export type DeleteUserByIdResponse = Schemas.DeleteUserReturn[]

export type DeleteUserByIdVariables = {
  pathParams: DeleteUserByIdPathParams
} & PhotolipContext['fetcherOptions']

export const fetchDeleteUserById = (variables: DeleteUserByIdVariables, signal?: AbortSignal) =>
  photolipFetch<DeleteUserByIdResponse, DeleteUserByIdError, undefined, {}, {}, DeleteUserByIdPathParams>({
    url: '/user/{userId}',
    method: 'delete',
    ...variables,
    signal
  })

export const useDeleteUserById = (
  options?: Omit<
    reactQuery.UseMutationOptions<DeleteUserByIdResponse, DeleteUserByIdError, DeleteUserByIdVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePhotolipContext()
  return reactQuery.useMutation<DeleteUserByIdResponse, DeleteUserByIdError, DeleteUserByIdVariables>({
    mutationFn: (variables: DeleteUserByIdVariables) => fetchDeleteUserById({ ...fetcherOptions, ...variables }),
    ...options
  })
}

export type CreatePhotoError = Fetcher.ErrorWrapper<undefined>

export type CreatePhotoResponse = Schemas.PostPhotoReturn[]

export type CreatePhotoVariables = {
  body: Schemas.PhotoRequestBody
} & PhotolipContext['fetcherOptions']

export const fetchCreatePhoto = (variables: CreatePhotoVariables, signal?: AbortSignal) =>
  photolipFetch<CreatePhotoResponse, CreatePhotoError, Schemas.PhotoRequestBody, {}, {}, {}>({
    url: '/photo',
    method: 'post',
    ...variables,
    signal
  })

export const useCreatePhoto = (
  options?: Omit<
    reactQuery.UseMutationOptions<CreatePhotoResponse, CreatePhotoError, CreatePhotoVariables>,
    'mutationFn'
  >
) => {
  const { fetcherOptions } = usePhotolipContext()
  return reactQuery.useMutation<CreatePhotoResponse, CreatePhotoError, CreatePhotoVariables>({
    mutationFn: (variables: CreatePhotoVariables) => fetchCreatePhoto({ ...fetcherOptions, ...variables }),
    ...options
  })
}

export type QueryOperation =
  | {
      path: '/travel/{travelId}'
      operationId: 'getTravelById'
      variables: GetTravelByIdVariables
    }
  | {
      path: '/travelRecord'
      operationId: 'getTravelRecord'
      variables: GetTravelRecordVariables
    }
  | {
      path: '/user/{userId}'
      operationId: 'getUserById'
      variables: GetUserByIdVariables
    }
